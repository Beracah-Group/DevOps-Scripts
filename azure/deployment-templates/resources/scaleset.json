{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "templateBaseUrl": {
      "type": "string"
    },
    "skuName": {
      "type": "string"
    },
    "baseName": {
      "type": "string"
    },
    "hostnameBase": {
      "type": "string"
    },
    "networkProfile": {
      "type": "object"
    },
    "instanceCount": {
      "type": "int",
      "maxValue": 100
    },
    "diskSize": {
      "type": "string"
    },
    "publicKey": {
      "type": "secureString"
    },
    "adminUsername": {
      "type": "string"
    },
    "installTwistlockDefender": {
      "type": "bool"
    },
    "tlBearer": {
      "type": "secureString"
    },
    "provisioningConfig": {
      "type": "secureObject",
      "defaultValue": {}
    }
  },
  "variables": {
    "osType": {
      "publisher": "Canonical",
      "offer": "UbuntuServer",
      "sku": "16.04-LTS",
      "version": "latest"
    },
    "imageReference": "[variables('osType')]",
    "scriptsBaseUrl": "[concat(parameters('templateBaseUrl'), '/azure/deployment-templates/scripts/')]",
    "baseProvisioningConfig": {
      "base": {
        "scripts": {
          "00-system-base.sh": "o",
          "00-waagent-config.sh": "i",
          "90-twistlock-defender-install.sh": "i",
          "fixes/05-bad-mount.sh": "i",
          "fixes/05-hostname-in-hosts.sh": "o",
          "fixes/05-inotify-bump.sh": "o",
          "fixes/05-max_map_count-sysctl.sh": "o",
          "fixes/05-nofile-bump.sh": "o",
          "fixes/05-rsyslog-shipper.sh": "i",
          "fixes/05-udev-macaddresspolicy.sh": "i"
        },
        "envVars": {
          "INSTALL_TWISTLOCK": "[string(parameters('installTwistlockDefender'))]",
          "TL_BEARER": "[parameters('tlBearer')]",
          "TL_HOST": "tw-console.steelcase.com",
          "TL_PORT": "8443"
        },
        "scriptURL": "[variables('scriptsBaseUrl')]"
      }
    },
    "provisioningConfig": "[union(variables('baseProvisioningConfig'), parameters('provisioningConfig'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "[parameters('baseName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "2017-12-01",
      "sku": {
        "name": "[parameters('skuName')]",
        "tier": "Standard",
        "capacity": "[parameters('instanceCount')]"
      },
      "properties": {
        "overprovision": "false",
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "storageProfile": {
            "dataDisks": [{
              "lun": "0",
              "createOption": "empty",
              "diskSizeGB": "[parameters('diskSize')]"
            }],
            "osDisk": {
              "createOption": "FromImage"
            },
            "imageReference": "[variables('imageReference')]"
          },
          "osProfile": {
            "computerNamePrefix": "[parameters('hostnameBase')]",
            "adminUsername": "[parameters('adminUsername')]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": "true",
              "ssh": {
                "publicKeys": [
                  {
                    "path": "[concat('/home/',parameters('adminUsername'),'/.ssh/authorized_keys')]",
                    "keyData": "[parameters('publicKey')]"
                  }
                ]
              }
            }
          },
          "networkProfile": "[parameters('networkProfile')]",
          "extensionProfile": {
            "extensions": [
              {
                "name": "lapextension",
                "properties": {
                  "publisher": "Microsoft.Azure.Extensions",
                  "type": "CustomScript",
                  "typeHandlerVersion": "2.0",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "fileUris": ["[concat(variables('scriptsBaseUrl'), 'provision.py')]"],
                    "timestamp": "[length(string(variables('provisioningConfig')))]"
                  },
                  "protectedSettings": {
                    "commandToExecute": "[concat('echo ''', string(variables('provisioningConfig')), ''' > config.json && ', ' python3 -u provision.py')]"
                  }
                }
              }
            ]
          }
        }
      }
    }
  ],
  "outputs": {}
}
